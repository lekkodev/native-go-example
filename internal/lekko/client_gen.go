// Generated by Lekko. DO NOT EDIT.
package lekko

import (
	"context"
	"errors"
	"os"

	client "github.com/lekkodev/go-sdk/client"
	lekkodefault "github.com/lekkodev/native-go-example/internal/lekko/default"
	"google.golang.org/protobuf/proto"
)

type LekkoClient struct {
	Default *lekkodefault.LekkoClient
	Close   client.CloseFunc
}

// Initializes the Lekko SDK client.
// For remote configs to be fetched correctly, the LEKKO_API_KEY, LEKKO_REPOSITORY_OWNER, and LEKKO_REPOSITORY_NAME env variables are required.
// If these values are missing or if there are any connection errors, the static fallbacks will be used.
func NewLekkoClient(ctx context.Context, opts ...client.ProviderOption) *LekkoClient {
	apiKey := os.Getenv("LEKKO_API_KEY")
	repoOwner := os.Getenv("LEKKO_REPOSITORY_OWNER")
	repoName := os.Getenv("LEKKO_REPOSITORY_NAME")
	opts = append(opts, client.WithAPIKey(apiKey))
	provider, err := client.CachedAPIProvider(ctx, &client.RepositoryKey{
		OwnerName: repoOwner,
		RepoName:  repoName,
	}, opts...)
	if err != nil {
		provider = &noOpProvider{}
	}
	cli, close := client.NewClient(provider)
	return &LekkoClient{
		Default: &lekkodefault.LekkoClient{Client: cli},
		Close:   close,
	}
}

type noOpProvider struct{}

func (p *noOpProvider) GetBool(ctx context.Context, key string, namespace string) (bool, error) {
	return false, errors.New("not implemented")
}
func (p *noOpProvider) GetInt(ctx context.Context, key string, namespace string) (int64, error) {
	return 0, errors.New("not implemented")
}
func (p *noOpProvider) GetFloat(ctx context.Context, key string, namespace string) (float64, error) {
	return 0, errors.New("not implemented")
}
func (p *noOpProvider) GetString(ctx context.Context, key string, namespace string) (string, error) {
	return "", errors.New("not implemented")
}
func (p *noOpProvider) GetProto(ctx context.Context, key string, namespace string, result proto.Message) error {
	return errors.New("not implemented")
}
func (p *noOpProvider) GetJSON(ctx context.Context, key string, namespace string, result interface{}) error {
	return errors.New("not implemented")
}
func (p *noOpProvider) Close(ctx context.Context) error {
	return nil
}
